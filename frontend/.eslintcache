[{"C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\index.js":"1","C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\App.js":"2","C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\reportWebVitals.js":"3","C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\template.js":"4","C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\contacts.js":"5","C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\input-field.js":"6","C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\sendEmail.js":"7"},{"size":500,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":4461,"mtime":1607059377506,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"9"},{"size":774,"mtime":1606970399863,"results":"12","hashOfConfig":"9"},{"size":2727,"mtime":1607051498554,"results":"13","hashOfConfig":"9"},{"size":439,"mtime":1607051932464,"results":"14","hashOfConfig":"9"},{"size":512,"mtime":1607052019574,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"1p7szq",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"18"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\index.js",[],["35","36"],"C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\App.js",["37"],"C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\reportWebVitals.js",[],"C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\template.js",["38","39"],"import React from 'react';\r\nimport { createStyles, makeStyles } from '@material-ui/styles';\r\nimport { TextareaAutosize } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles( theme =>\r\n  createStyles({\r\n    table: { minWidth: 1000,\r\n    },\r\n    pageHeader: {\r\n      position: 'fixed'\r\n    },\r\n  })\r\n);\r\n\r\nexport default function Template(props) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(props.default);\r\n  const handleChange = (event) => {\r\n    setValue(event.target.value);\r\n    if( props.onChange ) {\r\n      props.onChange(event.target.value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n    <h3>{props.title}</h3>\r\n    <TextareaAutosize cols=\"80\" rows=\"10\" onChange={handleChange} defaultValue={props.default} />\r\n    </div>\r\n  );\r\n}\r\n","C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\contacts.js",["40","41"],"import { createStyles, FormControl, InputLabel, Select } from '@material-ui/core';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useState, useEffect } from 'react';\r\n\r\nconst useStyles = makeStyles( theme =>\r\n  createStyles({\r\n    paper: {\r\n      backgroundColor: theme.palette.background.paper,\r\n      border: '2px solid #000',\r\n      boxShadow: theme.shadows[5],\r\n      padding: theme.spacing(2,4,3),\r\n    },\r\n    modal: {\r\n      display: 'flex',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n    },\r\n    formControl: {\r\n      margin: theme.spacing(1),\r\n      minWidth: 200,\r\n      maxWidth: 500,\r\n    },\r\n  }),\r\n);\r\n\r\nexport default function Contacts(props) {\r\n  //const [contacts, setContacts] = useState();\r\n  const classes = useStyles();\r\n\r\n  //const [personName, setPersonName] = useState([]);\r\n  const [personId, setPersonId] = useState(0);\r\n  const [backendContacts, setBackendContacts] = useState(null);\r\n  const [contactIDs, setContactIDs] = useState([]);\r\n  const [optionList, setOptionList] = useState('');\r\n  console.log('backendContacts: ', backendContacts);\r\n\r\n  useEffect( () => {\r\n    async function getContacts() {\r\n      let requestOptions = {\r\n        method: 'GET',\r\n        headers: { 'Content-Type': 'application/json' }\r\n      };\r\n      let response = await fetch( \"http://localhost:4000/api/contacts\", requestOptions);\r\n      const contactsJson = await response.json();\r\n      let contacts = JSON.parse(contactsJson);\r\n\r\n      console.log('body: ', contacts);\r\n      setBackendContacts(contacts);\r\n\r\n      let contIdKeys = Object.keys(contacts);\r\n      console.log('contIdKeys: ', contIdKeys);\r\n      setContactIDs(contIdKeys);\r\n\r\n      // Establish initial selection\r\n      if( contIdKeys && contIdKeys[0] ) {\r\n        setPersonId(contIdKeys[0]);\r\n        props.onChange(contacts[contIdKeys[0]]);\r\n      }\r\n\r\n      setOptionList(contIdKeys.map((contactId) => (\r\n        <option key={contacts[contactId].name} value={contactId}>\r\n          {contacts[contactId].name}\r\n        </option>\r\n      )));\r\n    }\r\n    getContacts();\r\n  }, []);\r\n\r\n  const handleChange = (event) => {\r\n      console.log('event.target.value: ', event.target.value);\r\n      setPersonId(event.target.value);\r\n      props.onChange(backendContacts[event.target.value]);\r\n  }\r\n\r\n  return (\r\n    <FormControl className={classes.formControl}>\r\n      <InputLabel shrink htmlFor=\"select-multiple-native\">\r\n        Contacts to get email\r\n      </InputLabel>\r\n      <Select\r\n        native\r\n        value={personId}\r\n        onChange={handleChange}\r\n        inputProps={{\r\n          id: 'select-multiple-native',\r\n        }}\r\n      >\r\n        {optionList}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n}\r\n",["42","43"],"C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\input-field.js",["44"],"import TextField from '@material-ui/core/TextField';\r\nimport { useState } from 'react';\r\n\r\nexport default function InputField(props) {\r\n  const [value, setValue] = useState(props.defaultValue);\r\n\r\n  let handleChange = (event) => {\r\n    let val = event.target.value;\r\n    setValue(val);\r\n    props.onChange(val);\r\n  };\r\n\r\n  return (\r\n    <TextField label={props.label} onChange={handleChange} defaultValue={props.defaultValue} />\r\n  );\r\n}\r\n","C:\\Users\\trevo\\dev\\create-template\\frontend\\src\\sendEmail.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":5,"column":32,"nodeType":"51","messageId":"52","endLine":5,"endColumn":38},{"ruleId":"49","severity":1,"message":"53","line":16,"column":9,"nodeType":"51","messageId":"52","endLine":16,"endColumn":16},{"ruleId":"49","severity":1,"message":"54","line":17,"column":10,"nodeType":"51","messageId":"52","endLine":17,"endColumn":15},{"ruleId":"49","severity":1,"message":"55","line":33,"column":10,"nodeType":"51","messageId":"52","endLine":33,"endColumn":20},{"ruleId":"56","severity":1,"message":"57","line":67,"column":6,"nodeType":"58","endLine":67,"endColumn":8,"suggestions":"59"},{"ruleId":"45","replacedBy":"60"},{"ruleId":"47","replacedBy":"61"},{"ruleId":"49","severity":1,"message":"54","line":5,"column":10,"nodeType":"51","messageId":"52","endLine":5,"endColumn":15},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'Select' is defined but never used.","Identifier","unusedVar","'classes' is assigned a value but never used.","'value' is assigned a value but never used.","'contactIDs' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["64"],["62"],["63"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [props]",{"range":"67","text":"68"},[2093,2095],"[props]"]